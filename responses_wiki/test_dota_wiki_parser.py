"""Module used to test dota_wiki_parser module methods."""

import unittest
import json

import dota_wiki_parser as parser

__author__ = 'Jonarzz'


class AccountTest(unittest.TestCase):
    """Class used to test dota_wiki_parser module.
    Inherits from TestCase class of unittest module."""

    def test_dictionary_from_file(self):
        """Method testing dictionary_from_file method from dota_wiki_parser module.

        The method checks if the imported dictionary from .txt file with JSON content
        is the same as predefined dictionary in the test case.
        """
        resp_dict = {"abc" : "http://def.gh/Abad_a_.mp3", "123" : "http://456.78/Noba_a_.mp3"}
        hero_dict = {"Abad" : "Abaddon", "Noba" : "Techies"}

        self.assertEqual(parser.dictionary_from_file('test_responses_dict.txt'), resp_dict)
        self.assertEqual(parser.dictionary_from_file('test_heroes_dict.txt'), hero_dict)

    def test_pages_to_parse(self):
        """Method testing pages_to_parse method from dota_wiki_parser module.

        The method checks if the requested response is consists of JSON payload as expected.
        """

        url = parser.URL_BEGINNING + parser.URL_API + parser.CATEGORY
        parsed_json = json.loads(parser.page_to_parse(url))

        self.assertIsNotNone(parsed_json)
        self.assertNotEqual(parsed_json["query"]["categorymembers"], [])

    def test_pages_for_category(self):
        """Method testing pages_for_category method from dota_wiki_parser module.

        The method checks if the list generated by the method is not empty.
        """
        self.assertNotEqual(parser.pages_for_category(parser.CATEGORY), [])

    def test_key_from_element(self):
        """Method testing key_from_element method from dota_wiki_parser module.

        The method checks if the string containing html code is stripped properly.
        """
        html = '<li> <a href="http://a.a" title="Play" class="sm2">Play</a> Earthshaker! </li>'

        self.assertEqual(parser.key_from_element(html), 'earthshaker')

    def test_substring_from_key(self):
        """Method testing substring_from_key method from dota_wiki_parser module."""
        self.assertEqual(parser.substring_from_key('out<i>Test</i>', '<i>', '</i>', 4), 'out')
        self.assertEqual(parser.substring_from_key('output(test)', '(', ')', 1), 'output')

    def test_clean_key(self):
        """Method testing clean_key method from dota_wiki_parser module.

        Please, check help for clean_key method for further information about the expected results.
        """
        self.assertEqual(parser.clean_key(' Earthshaker! <i>test</i>(test2)'), 'earthshaker')

    def test_value_from_element(self):
        """Method testing value_from_element method from dota_wiki_parser module.

        The module is testing if the method extracts a proper url from the given html element.
        """
        url = '<li> <a href="http://a.a" title="Play" class="sm2">Play</a> Earthshaker! </li>'
        self.assertEqual(parser.value_from_element(url), 'http://a.a')

    def test_short_hero_name_from_url(self):
        """Method testing short_hero_name_from_url method from dota_wiki_parser module."""
        self.assertEqual(parser.short_hero_name_from_url('/Test_asdf.mp3'), 'Test')
        self.assertEqual(parser.short_hero_name_from_url('/Dlc_Test_asdf.mp3'), 'Dlc_Test')
        self.assertEqual(parser.short_hero_name_from_url('/Dlc_tech_ann_asdf.mp3'), 'Dlc_tech_ann')

    def test_ellipsis_to_three_dots(self):
        """Method testing ellipsis_to_three_dots method from dota_wiki_parser module."""
        in_dict = parser.dictionary_from_file('test_ellipsis_dict.txt')
        out_dict = {'aa...aa' : 'abc', '...' : 'aaa', '1... 2... 3...' : '123'}

        self.assertEqual(parser.ellipsis_to_three_dots(in_dict), out_dict)
